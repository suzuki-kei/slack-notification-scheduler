
const assert = require("assert")
const Frequency = require("../src/Frequency.gs").Frequency
const CalendarFactory = require("../src/common/Calendar.gs").CalendarFactory

describe("Frequency", () => {

    function testFrequency(name, frequencyClass, now, nth, dow, hours, minutes, datetime, expected) {
        it(name, () => {
            const holidays = CalendarFactory.getJapaneseHolidays()
            const firstDayOfWeek = 1
            const calendarFactory = new CalendarFactory(holidays, firstDayOfWeek)

            // 不具合が見つかりやすくなるように seconds, milliseconds に 0 以外を設定する.
            now = new Date(now)
            now.setSeconds(59)
            now.setMilliseconds(59)

            datetime &&= new Date(datetime)
            expected &&= new Date(expected)
            const frequency = new frequencyClass(nth, dow, hours, minutes, datetime)
            const actual = frequency.next(now, calendarFactory)
            if(expected == null) {
                assert.equal(actual, expected)
            } else {
                assert.deepEqual(actual, expected)
            }
        })
    }

    describe("Frequency.Once#next", () => {
        function test(name, now, datetime, expected) {
            testFrequency(name, Frequency.Once,
                          now, null, null, null, null, datetime, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                 ["2021-12-31 12:33", "2021-12-31 12:34", "2021-12-31 12:34"],
                 ["2021-12-31 12:34", "2021-12-31 12:34", null],
            ])
        })
    })

    describe("Frequency.Daily#next", () => {
        function test(name, now, hours, minutes, expected) {
            testFrequency(name, Frequency.Daily,
                          now, null, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                 ["2021-02-01 08:59", 9, 0, "2021-02-01 09:00"],
                 ["2021-02-01 09:00", 9, 0, "2021-02-02 09:00"],
            ])
        })
    })

    describe("Frequency.DailyBusinessDay#next", () => {
        function test(name, now, hours, minutes, expected) {
            testFrequency(name, Frequency.DailyBusinessDay,
                          now, null, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                 ["2021-02-01 08:59", 9, 0, "2021-02-01 09:00"],
                 ["2021-02-09 09:00", 9, 0, "2021-02-10 09:00"],
            ])
        })
        describe("営業日が返される", () => {
            tests([
                 ["2021-02-10 08:59", 9, 0, "2021-02-10 09:00"],
                 ["2021-02-10 09:00", 9, 0, "2021-02-12 09:00"],
            ])
        })
    })

    describe("Frequency.WeeklyNthDay#next", () => {
        function test(name, now, dow, hours, minutes, expected) {
            testFrequency(name, Frequency.WeeklyNthDay,
                          now, null, dow, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                 ["2021-02-01 08:59", 1, 9, 0, "2021-02-01 09:00"],
                 ["2021-02-01 09:00", 1, 9, 0, "2021-02-08 09:00"],
            ])
        })
        describe("指定曜日の日が返される", () => {
            tests([
                 ["2021-02-01 08:59", 1, 9, 0, "2021-02-01 09:00"],
                 ["2021-02-01 08:59", 2, 9, 0, "2021-02-02 09:00"],
                 ["2021-02-01 08:59", 3, 9, 0, "2021-02-03 09:00"],
                 ["2021-02-01 08:59", 4, 9, 0, "2021-02-04 09:00"],
                 ["2021-02-01 08:59", 5, 9, 0, "2021-02-05 09:00"],
                 ["2021-02-01 08:59", 6, 9, 0, "2021-02-06 09:00"],
                 ["2021-02-01 08:59", 0, 9, 0, "2021-02-07 09:00"],
            ])
        })
    })

    describe("Frequency.WeeklyNthBusinessDay#next", () => {
        function test(name, now, nth, hours, minutes, expected) {
            testFrequency(name, Frequency.WeeklyNthBusinessDay,
                          now, nth, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                 ["2021-02-01 08:59", 1, 9, 0, "2021-02-01 09:00"],
                 ["2021-02-01 09:00", 1, 9, 0, "2021-02-08 09:00"],
            ])
        })
        describe("N 番目の営業日が返される", () => {
            tests([
                ["2021-02-01 09:00",  1, 9, 0, "2021-02-08 09:00"],
                ["2021-02-02 09:00",  2, 9, 0, "2021-02-09 09:00"],
                ["2021-02-03 09:00",  3, 9, 0, "2021-02-10 09:00"],
                ["2021-02-04 09:00",  4, 9, 0, "2021-02-12 09:00"], // 2021-02-11 は建国記念日
                ["2021-02-05 09:00",  5, 9, 0, "2021-02-19 09:00"], // 2021-02-11 は建国記念日
                ["2021-02-05 09:00", -1, 9, 0, "2021-02-12 09:00"],
                ["2021-02-04 09:00", -2, 9, 0, "2021-02-10 09:00"], // 2021-02-11 は建国記念日
                ["2021-02-03 09:00", -3, 9, 0, "2021-02-09 09:00"], // 2021-02-11 は建国記念日
                ["2021-02-02 09:00", -4, 9, 0, "2021-02-08 09:00"], // 2021-02-11 は建国記念日
                ["2021-02-01 09:00", -5, 9, 0, "2021-02-15 09:00"], // 2021-02-11 は建国記念日
            ])
        })
        describe("6, 7 番目の営業日を持つ週は存在しない", () => {
            tests([
                 ["2021-02-01 08:59", 6, 9, 0, null],
                 ["2021-02-01 08:59", 7, 9, 0, null],
            ])
        })
    })

    describe("Frequency.MonthlyNthDay#next", () => {
        function test(name, now, nth, hours, minutes, expected) {
            testFrequency(name, Frequency.MonthlyNthDay,
                          now, nth, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2021-02-01 08:59",   1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 09:00",   1, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("N 番目の日が返される", () => {
            tests([
                ["2021-02-01 08:59",   1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59",   2, 9, 0, "2021-02-02 09:00"],
                ["2021-02-01 08:50",   3, 9, 0, "2021-02-03 09:00"],
                ["2021-02-01 08:59",  28, 9, 0, "2021-02-28 09:00"],
                ["2021-02-01 08:59",  -1, 9, 0, "2021-02-28 09:00"],
                ["2021-02-01 08:59",  -2, 9, 0, "2021-02-27 09:00"],
                ["2021-02-01 08:59",  -3, 9, 0, "2021-02-26 09:00"],
                ["2021-02-01 08:59", -28, 9, 0, "2021-02-01 09:00"],
            ])
        })
        describe("今月に N 番目の日が残されていない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-28 09:00",   1, 9, 0, "2021-03-01 09:00"],
                ["2021-02-28 09:00",   2, 9, 0, "2021-03-02 09:00"],
                ["2021-02-28 09:00",   3, 9, 0, "2021-03-03 09:00"],
                ["2021-02-28 09:00",  28, 9, 0, "2021-03-28 09:00"],
                ["2021-02-28 09:00",  -1, 9, 0, "2021-03-31 09:00"],
                ["2021-02-28 09:00",  -2, 9, 0, "2021-03-30 09:00"],
                ["2021-02-28 09:00",  -3, 9, 0, "2021-03-29 09:00"],
                ["2021-02-28 09:00", -28, 9, 0, "2021-03-04 09:00"],
            ])
        })
        describe("今月に N 番目の日が存在しない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  29, 9, 0, "2021-03-29 09:00"],
                ["2021-02-01 08:59",  30, 9, 0, "2021-03-30 09:00"],
                ["2021-02-01 08:59",  31, 9, 0, "2021-03-31 09:00"],
                ["2021-02-01 08:59", -29, 9, 0, "2021-03-03 09:00"],
                ["2021-02-01 08:59", -30, 9, 0, "2021-03-02 09:00"],
                ["2021-02-01 08:59", -31, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("今月, 翌月に指定日が存在しない場合は翌々月の日が返される", () => {
            tests([
                ["2021-01-31 08:59",  31, 9, 0, "2021-01-31 09:00"],
                ["2021-01-31 09:00",  31, 9, 0, "2021-03-31 09:00"],
                ["2021-01-01 08:59", -31, 9, 0, "2021-01-01 09:00"],
                ["2021-01-01 09:00", -31, 9, 0, "2021-03-01 09:00"],
            ])
        })
    })

    describe("Frequency.MonthlyNthBusinessDay#next", () => {
        function test(name, now, nth, hours, minutes, expected) {
            testFrequency(name, Frequency.MonthlyNthBusinessDay,
                          now, nth, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 09:00",  1, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("N 番目の営業日が返される", () => {
            tests([
                ["2021-02-01 08:59",   1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59",   2, 9, 0, "2021-02-02 09:00"],
                ["2021-02-01 08:59",   3, 9, 0, "2021-02-03 09:00"],
                ["2021-02-01 08:59",  18, 9, 0, "2021-02-26 09:00"],
                ["2021-02-01 08:59",  -1, 9, 0, "2021-02-26 09:00"],
                ["2021-02-01 08:59",  -2, 9, 0, "2021-02-25 09:00"],
                ["2021-02-01 08:59",  -3, 9, 0, "2021-02-24 09:00"],
                ["2021-02-01 08:59", -18, 9, 0, "2021-02-01 09:00"],
            ])
        })
        describe("今月に N 番目の営業日が残されていない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  18, 9, 0, "2021-02-26 09:00"],
                ["2021-02-01 08:59",  19, 9, 0, "2021-03-25 09:00"],
                ["2021-02-01 08:59",  23, 9, 0, "2021-03-31 09:00"],
                ["2021-02-01 08:59", -18, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59", -19, 9, 0, "2021-03-05 09:00"],
                ["2021-02-01 08:59", -23, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("今月に N 番目の営業日が存在しない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  18, 9, 0, "2021-02-26 09:00"],
                ["2021-02-01 08:59",  19, 9, 0, "2021-03-25 09:00"],
                ["2021-02-01 08:59", -18, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59", -19, 9, 0, "2021-03-05 09:00"],
                ["2021-02-01 08:59", -20, 9, 0, "2021-03-04 09:00"],
                ["2021-02-01 08:59", -21, 9, 0, "2021-03-03 09:00"],
                ["2021-02-01 08:59", -22, 9, 0, "2021-03-02 09:00"],
                ["2021-02-01 08:59", -23, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("どの月にも N 番目の営業日が存在しない場合は null が返される", () => {
            tests([
                ["2021-02-01 08:59",  31, 9, 0, null],
                ["2021-02-01 08:59", -31, 9, 0, null],
            ])
        })
    })

    describe("Frequency.MonthlyNthDow#next", () => {
        function test(name, now, nth, dow, hours, minutes, expected) {
            testFrequency(name, Frequency.MonthlyNthDow,
                          now, nth, dow, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  1, 1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 09:00",  1, 1, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("N 番目の指定曜日が返される", () => {
            tests([
                ["2021-02-01 08:59",  1, 1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59",  2, 1, 9, 0, "2021-02-08 09:00"],
                ["2021-02-01 08:59",  3, 1, 9, 0, "2021-02-15 09:00"],
                ["2021-02-01 08:59", -1, 1, 9, 0, "2021-02-22 09:00"],
                ["2021-02-01 08:59", -2, 1, 9, 0, "2021-02-15 09:00"],
                ["2021-02-01 08:59", -3, 1, 9, 0, "2021-02-08 09:00"],
            ])
        })
        describe("今月に N 番目の指定曜日が残されていない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-28 09:00",  1, 1, 9, 0, "2021-03-01 09:00"],
                ["2021-02-28 09:00",  2, 1, 9, 0, "2021-03-08 09:00"],
                ["2021-02-28 09:00",  3, 1, 9, 0, "2021-03-15 09:00"],
                ["2021-02-28 09:00", -1, 1, 9, 0, "2021-03-29 09:00"],
                ["2021-02-28 09:00", -2, 1, 9, 0, "2021-03-22 09:00"],
                ["2021-02-28 09:00", -3, 1, 9, 0, "2021-03-15 09:00"],
            ])
        })
        describe("今月に N 番目の指定曜日が存在しない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  5, 1, 9, 0, "2021-03-29 09:00"],
                ["2021-02-01 08:59", -5, 1, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("どの月にも N 番目の指定曜日が存在しない場合は null 返される", () => {
            tests([
                ["2021-02-01 08:59",  6, 1, 9, 0, null],
                ["2021-02-01 08:59", -6, 1, 9, 0, null],
            ])
        })
        describe("指定曜日の日が返される", () => {
            tests([
                ["2021-02-01 08:59", 1, 1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59", 1, 2, 9, 0, "2021-02-02 09:00"],
                ["2021-02-01 08:59", 1, 3, 9, 0, "2021-02-03 09:00"],
                ["2021-02-01 08:59", 1, 4, 9, 0, "2021-02-04 09:00"],
                ["2021-02-01 08:59", 1, 5, 9, 0, "2021-02-05 09:00"],
                ["2021-02-01 08:59", 1, 6, 9, 0, "2021-02-06 09:00"],
                ["2021-02-01 08:59", 1, 0, 9, 0, "2021-02-07 09:00"],
            ])
        })
    })

    describe("Frequency.MonthlyNthDowBusinessDay#next", () => {
        function test(name, now, nth, dow, hours, minutes, expected) {
            testFrequency(name, Frequency.MonthlyNthDowBusinessDay,
                          now, nth, dow, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  1, 1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 09:00",  1, 1, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("N 番目の指定営業曜日が返される", () => {
            tests([
                ["2021-02-01 08:59",  1, 1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59",  2, 1, 9, 0, "2021-02-08 09:00"],
                ["2021-02-01 08:59",  3, 1, 9, 0, "2021-02-15 09:00"],
                ["2021-02-01 08:59", -1, 1, 9, 0, "2021-02-22 09:00"],
                ["2021-02-01 08:59", -2, 1, 9, 0, "2021-02-15 09:00"],
                ["2021-02-01 08:59", -3, 1, 9, 0, "2021-02-08 09:00"],
            ])
        })
        describe("今月に N 番目の指定曜日が残されていない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-28 09:00",  1, 1, 9, 0, "2021-03-01 09:00"],
                ["2021-02-28 09:00",  2, 1, 9, 0, "2021-03-08 09:00"],
                ["2021-02-28 09:00",  3, 1, 9, 0, "2021-03-15 09:00"],
                ["2021-02-28 09:00", -1, 1, 9, 0, "2021-03-29 09:00"],
                ["2021-02-28 09:00", -2, 1, 9, 0, "2021-03-22 09:00"],
                ["2021-02-28 09:00", -3, 1, 9, 0, "2021-03-15 09:00"],
            ])
        })
        describe("今月に N 番目の指定曜日が存在しない場合は翌月の日が返される", () => {
            tests([
                ["2021-02-01 08:59",  5, 1, 9, 0, "2021-03-29 09:00"],
                ["2021-02-01 08:59", -5, 1, 9, 0, "2021-03-01 09:00"],
            ])
        })
        describe("どの月にも N 番目の指定曜日が存在しない場合は null 返される", () => {
            tests([
                ["2021-02-01 08:59",  6, 1, 9, 0, null],
                ["2021-02-01 08:59", -6, 1, 9, 0, null],
            ])
        })
        describe("指定曜日の日が返される", () => {
            tests([
                ["2021-02-01 08:59", 1, 1, 9, 0, "2021-02-01 09:00"],
                ["2021-02-01 08:59", 1, 2, 9, 0, "2021-02-02 09:00"],
                ["2021-02-01 08:59", 1, 3, 9, 0, "2021-02-03 09:00"],
                ["2021-02-01 08:59", 1, 4, 9, 0, "2021-02-04 09:00"],
                ["2021-02-01 08:59", 1, 5, 9, 0, "2021-02-05 09:00"],
            ])
        })
        describe("指定した営業曜日が存在しない場合は null が返される", () => {
            tests([
                ["2021-02-01 09:00", 1, 6, 9, 0, null],
                ["2021-02-01 09:00", 1, 0, 9, 0, null],
            ])
        })
    })

    describe("Frequency.YearlyNthDay#next", () => {
        function test(name, now, nth, hours, minutes, expected) {
            testFrequency(name, Frequency.YearlyNthDay,
                          now, nth, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2020-01-01 08:59",  1, 9, 0, "2020-01-01 09:00"],
                ["2020-01-01 09:00",  1, 9, 0, "2021-01-01 09:00"],
            ])
        })
        describe("N 番目の日が返される", () => {
            tests([
                ["2020-01-01 08:59",  1, 9, 0, "2020-01-01 09:00"],
                ["2020-01-01 08:59",  2, 9, 0, "2020-01-02 09:00"],
                ["2020-01-01 08:59",  3, 9, 0, "2020-01-03 09:00"],
                ["2020-01-01 08:59", -1, 9, 0, "2020-12-31 09:00"],
                ["2020-01-01 08:59", -2, 9, 0, "2020-12-30 09:00"],
                ["2020-01-01 08:59", -3, 9, 0, "2020-12-29 09:00"],
            ])
        })
        describe("今年に N 番目の日が残されていない場合は翌年の日が返される", () => {
            tests([
                ["2020-12-31 09:00",  1, 9, 0, "2021-01-01 09:00"],
                ["2020-12-31 09:00",  2, 9, 0, "2021-01-02 09:00"],
                ["2020-12-31 09:00",  3, 9, 0, "2021-01-03 09:00"],
                ["2020-12-31 09:00", -1, 9, 0, "2021-12-31 09:00"],
                ["2020-12-31 09:00", -2, 9, 0, "2021-12-30 09:00"],
                ["2020-12-31 09:00", -3, 9, 0, "2021-12-29 09:00"],
            ])
        })
        describe("今年に N 番目の日が存在しない場合は次の閏年の日が返される", () => {
            tests([
                ["2017-01-01 08:59",  366, 9, 0, "2020-12-31 09:00"],
                ["2018-01-01 08:59",  366, 9, 0, "2020-12-31 09:00"],
                ["2019-01-01 08:59",  366, 9, 0, "2020-12-31 09:00"],
                ["2020-01-01 08:59",  366, 9, 0, "2020-12-31 09:00"],
                ["2017-01-01 08:59", -366, 9, 0, "2020-01-01 09:00"],
                ["2018-01-01 08:59", -366, 9, 0, "2020-01-01 09:00"],
                ["2019-01-01 08:59", -366, 9, 0, "2020-01-01 09:00"],
                ["2020-01-01 08:59", -366, 9, 0, "2020-01-01 09:00"],
            ])
        })
    })

    describe("Frequency.YearlyNthBusinessDay#next", () => {
        function test(name, now, nth, hours, minutes, expected) {
            testFrequency(name, Frequency.YearlyNthBusinessDay,
                          now, nth, null, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2020-01-06 08:59",  1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-06 09:00",  1, 9, 0, "2021-01-04 09:00"],
            ])
        })
        describe("N 番目の営業日が返される", () => {
            tests([
                ["2020-01-01 08:59",    1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-01 08:59",    2, 9, 0, "2020-01-07 09:00"],
                ["2020-01-01 08:59",    3, 9, 0, "2020-01-08 09:00"],
                ["2020-01-01 08:59",  241, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59",   -1, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59",   -2, 9, 0, "2020-12-25 09:00"],
                ["2020-01-01 08:59",   -3, 9, 0, "2020-12-24 09:00"],
                ["2020-01-01 08:59", -241, 9, 0, "2020-01-06 09:00"],
            ])
        })
        describe("今年に N 番目の営業日が残されていない場合は翌年の日が返される", () => {
            tests([
                ["2020-12-31 09:00",    1, 9, 0, "2021-01-04 09:00"],
                ["2020-12-31 09:00",    2, 9, 0, "2021-01-05 09:00"],
                ["2020-12-31 09:00",    3, 9, 0, "2021-01-06 09:00"],
                ["2020-12-31 09:00",  241, 9, 0, "2021-12-24 09:00"],
                ["2020-12-31 09:00",   -1, 9, 0, "2021-12-28 09:00"],
                ["2020-12-31 09:00",   -2, 9, 0, "2021-12-27 09:00"],
                ["2020-12-31 09:00",   -3, 9, 0, "2021-12-24 09:00"],
                ["2020-12-31 09:00", -241, 9, 0, "2021-01-06 09:00"],
            ])
        })
        describe("今年に N 番目の営業日が存在しない場合は翌年の日が返される", () => {
            tests([
                ["2020-01-01 08:59", 241, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59", 242, 9, 0, "2021-12-27 09:00"],
            ])
        })
    })

    describe("Frequency.YearlyNthDow#next", () => {
        function test(name, now, nth, dow, hours, minutes, expected) {
            testFrequency(name, Frequency.YearlyNthDow,
                          now, nth, dow, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2020-01-06 08:59",  1, 1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-06 09:00",  1, 1, 9, 0, "2021-01-04 09:00"],
            ])
        })
        describe("N 番目の指定曜日が返される", () => {
            tests([
                ["2020-01-01 08:59",   1, 1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-01 08:59",   2, 1, 9, 0, "2020-01-13 09:00"],
                ["2020-01-01 08:59",   3, 1, 9, 0, "2020-01-20 09:00"],
                ["2020-01-01 08:59",  52, 1, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59",  -1, 1, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59",  -2, 1, 9, 0, "2020-12-21 09:00"],
                ["2020-01-01 08:59",  -3, 1, 9, 0, "2020-12-14 09:00"],
                ["2020-01-01 08:59", -52, 1, 9, 0, "2020-01-06 09:00"],
            ])
        })
        describe("指定曜日の日が返される", () => {
            tests([
                ["2020-01-01 08:59", 1, 1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-01 08:59", 1, 2, 9, 0, "2020-01-07 09:00"],
                ["2020-01-01 08:59", 1, 3, 9, 0, "2020-01-01 09:00"],
                ["2020-01-01 08:59", 1, 4, 9, 0, "2020-01-02 09:00"],
                ["2020-01-01 08:59", 1, 5, 9, 0, "2020-01-03 09:00"],
                ["2020-01-01 08:59", 1, 6, 9, 0, "2020-01-04 09:00"],
                ["2020-01-01 08:59", 1, 0, 9, 0, "2020-01-05 09:00"],
            ])
        })
    })

    describe("Frequency.YearlyNthDowBusinessDay#next", () => {
        function test(name, now, nth, dow, hours, minutes, expected) {
            testFrequency(name, Frequency.YearlyNthDowBusinessDay,
                          now, nth, dow, hours, minutes, null, expected)
        }
        function tests(valuesList) {
            valuesList.forEach((values, index) => {
                test("#" + index, ...values)
            })
        }
        describe("未来の日が返される", () => {
            tests([
                ["2020-01-06 08:59", 1, 1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-06 09:00", 1, 1, 9, 0, "2021-01-04 09:00"],
            ])
        })
        describe("N 番目の指定営業曜日が返される", () => {
            tests([
                ["2020-01-01 08:59",   1, 1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-01 08:59",   2, 1, 9, 0, "2020-01-20 09:00"], // 2020-01-13 は成人式
                ["2020-01-01 08:59",   3, 1, 9, 0, "2020-01-27 09:00"],
                ["2020-01-01 08:59",  46, 1, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59",  -1, 1, 9, 0, "2020-12-28 09:00"],
                ["2020-01-01 08:59",  -2, 1, 9, 0, "2020-12-21 09:00"],
                ["2020-01-01 08:59",  -3, 1, 9, 0, "2020-12-14 09:00"],
                ["2020-01-01 08:59", -46, 1, 9, 0, "2020-01-06 09:00"],
            ])
        })
        describe("指定曜日の日が返される", () => {
            tests([
                ["2020-01-01 08:59", 1, 1, 9, 0, "2020-01-06 09:00"],
                ["2020-01-01 08:59", 1, 2, 9, 0, "2020-01-07 09:00"],
                ["2020-01-01 08:59", 1, 3, 9, 0, "2020-01-08 09:00"],
                ["2020-01-01 08:59", 1, 4, 9, 0, "2020-01-09 09:00"],
                ["2020-01-01 08:59", 1, 5, 9, 0, "2020-01-10 09:00"],
            ])
        })
        describe("どの年にも N 番目の営業日が存在しない場合は null が返される", () => {
            tests([
                ["2020-01-01 08:59", 1, 6, 9, 0, null],
                ["2020-01-01 08:59", 1, 0, 9, 0, null],
            ])
        })
    })

})

